// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  createdAt        DateTime        @default(now())
  updateAt         DateTime        @default(now())
  email            String          @unique
  password         String
  status           AccountStatus   @default(UNVERIFIED)
  refreshToken     String?
  verificationCode String?
  profile          Profile?
  role             Role[]
  posts            Post[]
  comments         Comment[]
  reaction         Reaction[]
  reportPost       PostReport[]
  reportComment    CommentReport[]

  @@map("user")
}

model Profile {
  id         String      @id @default(uuid())
  createdAt  DateTime    @default(now())
  updateAt   DateTime    @default(now())
  view       ProfileView @default(PUBLIC)
  attachment Attachment?
  firstName  String
  lastName   String
  userId     String      @unique
  user       User        @relation(fields: [userId], references: [id])

  @@map("profile")
}

model Attachment {
  id           Int      @id @default(autoincrement())
  uuid         String   @unique @default(uuid())
  path         String
  keyname      String
  ext          String
  contentType  String
  parentType   String
  profileImage Profile? @relation(fields: [profileId], references: [id])
  postImage    Post?    @relation(fields: [postId], references: [id])
  profileId    String?  @unique
  postId       String?  @unique
  createdAt    DateTime @default(now())
  updateAt     DateTime @default(now())

  @@map("attachment")
}

model Role {
  name      UserRole @id @unique
  user      User[]
  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())

  @@map("role")
}

model Post {
  id            String       @id @default(uuid())
  createdAt     DateTime     @default(now())
  updateAt      DateTime     @default(now())
  title         String
  content       String
  userId        String
  totalLikes    Int          @default(0)
  totalDislikes Int          @default(0)
  status        PostStatus
  attachment    Attachment?
  author        User         @relation(fields: [userId], references: [id])
  comments      Comment[]
  report        PostReport[]

  @@map("post")
}

model Comment {
  id            String          @id @default(uuid())
  content       String
  createdAt     DateTime        @default(now())
  updateAt      DateTime        @default(now())
  totalLikes    Int             @default(0)
  totalDislikes Int             @default(0)
  status        PostStatus
  userId        String
  author        User            @relation(fields: [userId], references: [id])
  postId        String
  post          Post            @relation(fields: [postId], references: [id])
  report        CommentReport[]

  @@map("comment")
}

model Reaction {
  postOrCommentId String
  userId          String
  reactionType    ReactionType
  user            User         @relation(fields: [userId], references: [id])
  source          Source

  @@id([userId, postOrCommentId])
  @@map("like")
}

model PostReport {
  id        String       @default(uuid())
  createdAt DateTime     @default(now())
  updateAt  DateTime     @default(now())
  reason    ReportReason
  message   String?
  userId    String
  postId    String
  user      User         @relation(fields: [userId], references: [id])
  post      Post         @relation(fields: [postId], references: [id])

  @@id([userId, postId, id])
  @@map("postReport")
}

model CommentReport {
  id        String       @default(uuid())
  createdAt DateTime     @default(now())
  updateAt  DateTime     @default(now())
  reason    ReportReason
  message   String?
  userId    String
  commentId String
  user      User         @relation(fields: [userId], references: [id])
  comment   Comment      @relation(fields: [commentId], references: [id])

  @@id([userId, commentId, id])
  @@map("comment_report")
}

enum PostStatus {
  PUBLISHED
  DRAFT
  DELETED
}

enum UserRole {
  USER
  ADMIN
}

enum ReportReason {
  SPAM
  FAKE_NEWS
  LANGUAGE_THAT_INSTIGATES_HATE
  BULLYING
  APOLOGY_OF_TERRORISM
  DISLIKE
  JUST_DONT_LIKE
  OTHER_PROBLEM
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  UNVERIFIED
}

enum Source {
  POST
  COMMENT
}

enum ReactionType {
  LIKE
  DISLIKE
  UNSPECIFIED
}

enum ProfileView {
  PUBLIC
  PRIVATE
}
