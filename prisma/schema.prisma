// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  createdAt     DateTime        @default(now())
  updateAt      DateTime        @default(now())
  email         String          @unique
  password      String
  refreshToken  String?
  isVerified    Boolean         @default(false)
  profile       Profile?
  role          Role[]
  posts         Post[]
  comments      Comment[]
  likeToPost    LikeOnPost[]
  likeToComment LikeOnComment[]
  reportPost    PostReport[]
  reportComment CommentReport[]

  @@map("user")
}

model Profile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())
  firstName String
  lastName  String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])

  @@map("profile")
}

model Role {
  name      UserRole @id @unique
  user      User[]
  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())

  @@map("role")
}

model Post {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now())
  updateAt     DateTime     @default(now())
  title        String
  content      String
  userId       String
  status       PostStatus
  author       User         @relation(fields: [userId], references: [id])
  comments     Comment[]
  likeFromUser LikeOnPost[]
  report       PostReport[]

  @@map("post")
}

model Comment {
  id           String          @id @default(uuid())
  content      String
  createdAt    DateTime        @default(now())
  updateAt     DateTime        @default(now())
  status       PostStatus
  userId       String
  author       User            @relation(fields: [userId], references: [id])
  postId       String
  post         Post            @relation(fields: [postId], references: [id])
  likeFromUser LikeOnComment[]
  report       CommentReport[]

  @@map("comment")
}

model LikeOnPost {
  postId String
  userId String @unique
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([postId, userId])
  @@map("like_on_post")
}

model LikeOnComment {
  userId    String  @unique
  commentId String
  user      User    @relation(fields: [userId], references: [id])
  comment   Comment @relation(fields: [commentId], references: [id])

  @@id([userId, commentId])
  @@map("like_on_comment")
}

model PostReport {
  id        String       @default(uuid())
  createdAt DateTime     @default(now())
  updateAt  DateTime     @default(now())
  reason    ReportReason
  message   String?
  userId    String
  postId    String
  user      User         @relation(fields: [userId], references: [id])
  post      Post         @relation(fields: [postId], references: [id])

  @@id([userId, postId, id])
  @@map("postReport")
}

model CommentReport {
  id        String       @default(uuid())
  createdAt DateTime     @default(now())
  updateAt  DateTime     @default(now())
  reason    ReportReason
  message   String?
  userId    String
  commentId String
  user      User         @relation(fields: [userId], references: [id])
  comment   Comment      @relation(fields: [commentId], references: [id])

  @@id([userId, commentId, id])
  @@map("comment_report")
}

enum PostStatus {
  PUBLISHED
  DRAFT
  DELETED
}

enum UserRole {
  USER
  ADMIN
}

enum ReportReason {
  SPAM
  FAKE_NEWS
  LANGUAGE_THAT_INSTIGATES_HATE
  BULLYING
  APOLOGY_OF_TERRORISM
  DISLIKE
  JUST_DONT_LIKE
  OTHER_PROBLEM
}
